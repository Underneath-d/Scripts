using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PoolsManager : MonoBehaviour
{
    public int[] currentIndex = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0 };
    public Transform poolHome;
    public static PoolsManager instance;
    public Dictionary<int, List<GameObject>> pools = new Dictionary<int, List<GameObject>>();
    private bool lockPool = false;
    private int num = 0;

    void Start()
    {
        instance = this;
    }

    public GameObject Create(int key, GameObject prefab, Vector3 position, Quaternion qua, Vector3 length)
    {
        GameObject Component;
        if (pools.ContainsKey(key))
        {
            for (int i = 0; i < pools[key].Count; ++i)   //把对象池遍历一遍
            {
                if (!pools[key][i].activeInHierarchy) //判断该对象是否在场景中激活。
                {
                    currentIndex[key]--;
                    Component = pools[key][i];
                    Component.SetActive(true); //找到没有被激活的对象激活
                    Component.transform.position = position;
                    Component.transform.rotation = qua;
                    Component.transform.localScale = length;
                    return Component;
                }
            }

            //如果遍历完一遍对象库发现没有可以用的，执行下面
            if (!lockPool)                               //如果没有锁定对象池大小，创建对象并添加到对象池中。
            {
                Component = Instantiate(prefab, position, qua, poolHome);
                //Component.transform.parent = poolHome;
                Component.transform.localScale = length;
                Component.name = Component.name + num;
                num++;
                pools[key].Add(Component);
                return Component;
            }
            else
                return null;
        }
        else
        {
            pools.Add(key, new List<GameObject>());
            Component = Instantiate(prefab, position, qua, poolHome);
            //Component.transform.parent = poolHome;
            Component.transform.localScale = length;
            Component.name = Component.name + num;
            num++;
            currentIndex[key] = 0;
            pools[key].Add(Component);
            return Component;
        }
    }

    public void Delete(int key, int count)
    {
        pools[key][count].SetActive(false);
        currentIndex[key] = count;
    }
}
